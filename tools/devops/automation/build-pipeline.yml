# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13760&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

variables:
- group: Xamarin-Secrets
- group: Xamarin Release
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: system.debug
  value: true

trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*

jobs:
- job: Build_iOS
  displayName: "Build iOS"
  pool:
    vmImage: macOS-10.15

  steps:
  - checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
    clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
    submodules: recursive

  - powershell: |
      gci env: | format-table -autosize -wrap
    displayName: 'Dump Environment'

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Brew components'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-brew-packages.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    timeoutInMinutes: 30

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Xcode'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-xcode.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    timeoutInMinutes: 250

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Mono'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-mono.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    timeoutInMinutes: 60

  - powershell: |
      $vsInstallPath = "/Applications/Visual Studio.app"
      $version = /usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "${vsInstallPath}/Contents/Info.plist"
      Write-Host "Visual Studio for Mac version: ${version}"

      Write-Host "Setting the following variable:"
      Write-Host "  VSMac.Version: ${version}"
      echo "##vso[task.setvariable variable=VSMac.Version]$version"
    displayName: 'VS for Mac version'
    timeoutInMinutes: 5

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision VS'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-vs.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    timeoutInMinutes: 60

  # Disabled
  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Objective Sharpie'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-objective-sharpie.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    enabled: false
    timeoutInMinutes: 30

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision .NET Core'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/tools/devops/provision-dotnetcore.csx
      provisioning_extra_args: '-vvvv'
      github-pat: $(GitHub.Token)
    timeoutInMinutes: 30

  - powershell: |
      if ([IO.Directory]::Exists('/Developer/MonoTouch')) {
        Write-Host "Deleting /Developer/MonoTouch"
        bash -c "sudo rm -Rf /Developer/MonoTouch"
      }

      if ([IO.Directory]::Exists('/Library/Frameworks/Xamarin.iOS.framework')) {
        Write-Host "Deleting /Library/Frameworks/Xamarin.iOS.framework"
        bash -c "sudo rm -Rf /Library/Frameworks/Xamarin.iOS.framework"
      }

      if ([IO.Directory]::Exists('/Library/Frameworks/Xamarin.Mac.framework')) {
        Write-Host "Deleting /Library/Frameworks/Xamarin.Mac.framework"
        bash -c "sudo rm -Rf /Library/Frameworks/Xamarin.Mac.framework"
      }
    displayName: 'Delete library folders'
    timeoutInMinutes: 5

# the following logic is the one used assumes that the working directory is cleaned and not in
# and unknown state. We make a diff between those builds that have been triggered from a public
# PR and those that are due to a commit on the release branches.
# To do so we use the env var System.PullRequest.PullRequestNumber which is
# the number of the pull request that caused this build.
  - bash: |
      set -x
      set -e

      PR_ID=$(System.PullRequest.PullRequestNumber)
      cd xamarin-macios
      if [ -z "$PR_ID" ]; then
        echo "Xamarin private packages NOT configured. Building a PR."
      else
        echo "Xamarin private packages configured."
        ./configure --enable-xamarin
        if [[ $? = 0 ]]; then
          echo "Xamarin private packages configured."
        else
          echo "Xamarin packages configuration failed."
          echo "Configuration exit code $?"
        fi
      fi
    displayName: 'Enable Xamarin private packages.'
    timeoutInMinutes: 1
